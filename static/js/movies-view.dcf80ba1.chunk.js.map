{"version":3,"file":"static/js/movies-view.dcf80ba1.chunk.js","mappings":"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","sources":["components/data/genresInfo.jsx","components/FilmList/CardFilm/GenerateGenres.jsx","components/FilmList/CardFilm/CardFilm.styled.jsx","components/FilmList/CardFilm/CardIFilm.jsx","components/FilmList/FilmList.styled.jsx","components/FilmList/FilmList.jsx","components/MoviesPage/Form/Form.styled.jsx","components/MoviesPage/Form/Form.jsx","components/MoviesPage/MoviesPage.jsx","services/fecthMovies.jsx"],"sourcesContent":["export const genresInfo = [\n  { id: 28, name: \"Action\" },\n  { id: 12, name: \"Adventure\" },\n  { id: 16, name: \"Animation\" },\n  { id: 35, name: \"Comedy\" },\n  { id: 80, name: \"Crime\" },\n  { id: 99, name: \"Documentary\" },\n  { id: 18, name: \"Drama\" },\n  { id: 10751, name: \"Family\" },\n  { id: 14, name: \"Fantasy\" },\n  { id: 36, name: \"History\" },\n  { id: 27, name: \"Horror\" },\n  { id: 10402, name: \"Music\" },\n  { id: 9648, name: \"Mystery\" },\n  { id: 10749, name: \"Romance\" },\n  { id: 878, name: \"Science Fiction\" },\n  { id: 10770, name: \"TV Movie\" },\n  { id: 53, name: \"Thriller\" },\n  { id: 10752, name: \"War\" },\n  { id: 37, name: \"Western\" },\n];\n","import { genresInfo } from \"../../data/genresInfo\";\nimport styled from \"styled-components\";\nexport const GenerateGenres = (genresId) => {\n  const id = Object.values(genresId);\n  const listGenres = [];\n\n  genresInfo.forEach((el) => {\n    if (id[0].includes(el.id)) {\n      listGenres.push(el.name);\n    }\n  });\n  return <Genres>{listGenres.slice(0, 2).join(\", \") + \", Other\"}</Genres>;\n};\n\nconst Genres = styled.span`\n  color: #ff6b01;\n`;\n","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const ItemLink = styled(Link)`\n  text-decoration: none;\n  color: #fff;\n`;\n\nexport const Item = styled.li`\n  overflow: hidden;\n  border-radius: 10px;\n  box-shadow: 0px 0px 5px 0px rgba(255, 255, 255, 0.75);\n  background-color: RGBA(0, 0, 0, 1);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.02);\n  }\n\n  @media screen and (max-width: 480px) {\n    width: 80%;\n  }\n`;\nexport const Title = styled.p`\n  font-size: 20px;\n  margin-bottom: 5px;\n`;\nexport const MetaWrapper = styled.div`\n  padding: 10px;\n`;\nexport const Image = styled.img`\n  display: block;\n  max-width: 100%;\n`;\n","import { useLocation } from \"react-router-dom\";\nimport { GenerateGenres } from \"./GenerateGenres\";\nimport { ItemLink, Item, Title, MetaWrapper, Image } from \"./CardFilm.styled\";\nimport PropTypes from \"prop-types\";\n\nconst CardFilm = ({ itemData }) => {\n  const location = useLocation();\n  const { poster_path, title, id, genre_ids } = itemData;\n\n  return (\n    <>\n      <Item>\n        <ItemLink\n          to={{\n            pathname: `/movies/${id}`,\n            state: { from: location },\n          }}\n        >\n          <Image\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                : `https://upload.wikimedia.org/wikipedia/commons/f/fc/No_picture_available.png`\n            }\n            alt=\"\"\n          />\n          <MetaWrapper>\n            <Title>{title}</Title>\n            <GenerateGenres genresId={genre_ids} />\n          </MetaWrapper>\n        </ItemLink>\n      </Item>\n    </>\n  );\n};\n\nexport default CardFilm;\n\nCardFilm.propTypes = {\n  itemData: PropTypes.object.isRequired,\n};\n","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 1em;\n  list-style: none;\n\n  @media screen and (max-width: 480px) {\n    grid-template-columns: repeat(1, 1fr);\n    justify-items: center;\n  }\n`;\n","import CardFilm from \"./CardFilm\";\nimport { List } from \"./FilmList.styled\";\nimport PropTypes from \"prop-types\";\n\nconst FilmList = ({ data }) => {\n  return (\n    <List>\n      {data.map((el) => (\n        <CardFilm key={el.id} itemData={el} />\n      ))}\n    </List>\n  );\n};\n\nexport default FilmList;\n\nFilmList.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n","import styled from \"styled-components\";\nimport { BsArrowRightCircle } from \"react-icons/bs\";\n\nexport const InputContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const ButtonSubmit = styled.button`\n  display: flex;\n  align-items: center;\n  border: none;\n  outline: none;\n  padding: 4.5px;\n  padding-top: 4px;\n  cursor: pointer;\n  border-top-right-radius: 5px;\n  border-bottom-right-radius: 5px;\n  background-color: #212229;\n  &:hover {\n  }\n`;\n\nexport const Input = styled.input`\n  width: 400px;\n  padding: 10px;\n  border: none;\n  outline: none;\n  border-top-left-radius: 5px;\n  border-bottom-left-radius: 5px;\n  background-color: #212229;\n  caret-color: #ff6b01;\n  color: #fff;\n\n  @media screen and (max-width: 480px) {\n    max-width: 300px;\n  }\n`;\n\nexport const IconSearch = styled(BsArrowRightCircle)`\n  color: #fff;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    color: #ff6b01;\n  }\n`;\n","import { InputContainer, ButtonSubmit, Input, IconSearch } from \"./Form.styled\";\nimport PropTypes from \"prop-types\";\n\nconst Form = ({ handleSubmit, handleInputChange, query }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <InputContainer>\n        {query ? (\n          <Input\n            placeholder=\"Type to search\"\n            type=\"text\"\n            onChange={handleInputChange}\n          />\n        ) : (\n          <Input\n            type=\"text\"\n            placeholder=\"Type to search\"\n            onChange={handleInputChange}\n          />\n        )}\n\n        <ButtonSubmit type=\"submit\">\n          <IconSearch size={30} />\n        </ButtonSubmit>\n      </InputContainer>\n    </form>\n  );\n};\n\nexport default Form;\n\nForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleInputChange: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired,\n};\n","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport * as FilmsAPI from \"../../services/fecthMovies\";\nimport FilmList from \"../FilmList\";\nimport Form from \"./Form/Form\";\nimport styled from \"styled-components\";\nimport { Notify } from \"notiflix/build/notiflix-notify-aio\";\nimport { Loading } from \"notiflix/build/notiflix-loading-aio\";\n\nconst MoviesPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState(searchParams.get(\"query\") ?? \"\");\n  const [films, setFilms] = useState([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  useEffect(() => {\n    if (query) {\n      setSearchParams(`query=${query}`);\n      FilmsAPI.fetchSearchFilmByName(query)\n        .then((data) => {\n          Loading.circle({\n            svgColor: \"#ff6b01\",\n          });\n          setFilms(data);\n        })\n        .finally(() => {\n          Loading.remove();\n        });\n    }\n  }, [query, setSearchParams]);\n\n  const handleInputChange = (e) => {\n    setSearchValue(e.target.value.toLowerCase().trim());\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (searchValue === \"\") {\n      Notify.failure(\"🦄 Please enter the name!\");\n      return;\n    }\n    setQuery(searchValue);\n  };\n\n  return (\n    <>\n      <ContainerForm>\n        <Form\n          handleSubmit={handleSubmit}\n          handleInputChange={handleInputChange}\n          query={query}\n        />\n      </ContainerForm>\n      <FilmList data={films} />\n    </>\n  );\n};\n\nconst ContainerForm = styled.div`\n  margin-top: 20px;\n`;\n\nexport default MoviesPage;\n","import axios from \"axios\";\n\nconst API_KEY = \"cd00d8c55831cbeec8ccdad1db16d6d2\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\n\nexport async function fetchPopularFilms() {\n  const response = await axios.get(\n    `/movie/popular?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n}\n\nexport async function fetchSearchFilmByName(filmName) {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&query=${filmName}&page=1&include_adult=false`\n  );\n  return response.data.results;\n}\n\nexport async function fetchFilmInfo(movie_id) {\n  const response = await axios.get(\n    `/movie/${movie_id}?api_key=cd00d8c55831cbeec8ccdad1db16d6d2&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function fetchMovieReviews(movie_id) {\n  const response = await axios.get(\n    `/movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response.data.results;\n}\n\nexport async function fetchMovieCredits(movie_id) {\n  const response = await axios.get(\n    `/movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response.data.cast;\n}\n"],"names":["genresInfo","id","name","GenerateGenres","genresId","Object","values","listGenres","forEach","el","includes","push","Genres","slice","join","styled","ItemLink","Link","Item","Title","MetaWrapper","Image","itemData","location","useLocation","poster_path","title","genre_ids","to","pathname","state","from","src","alt","List","data","map","InputContainer","ButtonSubmit","Input","IconSearch","BsArrowRightCircle","handleSubmit","handleInputChange","query","onSubmit","placeholder","type","onChange","size","ContainerForm","useSearchParams","searchParams","setSearchParams","useState","get","setQuery","films","setFilms","searchValue","setSearchValue","useEffect","FilmsAPI","then","Loading","svgColor","finally","e","preventDefault","Notify","target","value","toLowerCase","trim","FilmList","API_KEY","fetchPopularFilms","axios","response","results","fetchSearchFilmByName","filmName","fetchFilmInfo","movie_id","fetchMovieReviews","fetchMovieCredits","cast"],"sourceRoot":""}